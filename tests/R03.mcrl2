sort 
	sPedalState = struct Pressed | Released;
	sDNRPState = struct D | R | NP;
	sOnOffButton = struct SwitchOn | SwitchOff;
	sBatteryState = struct Unsafe | Safe | Full;
	sCCThreshold = struct BelowCCmin | AboveCCmin;
	sTurnOffThreshold = struct BelowTurnOffMax | AboveTurnOffMax;
	sDirection = struct Forwards | Backwards | Static;
	sCCState = struct Enabled | Disabled;
	sCCButton = struct Enable | Disable;
	sVirtualCarState = struct On | Off;

act 
  aMotorForce : sDirection;
	c_GasPedal : sPedalState;
 	c_BrakePedal : sPedalState;
 	c_DNRP : sDNRPState;
 	c_Car : sOnOffButton;
 	c_Battery : sBatteryState;
 	c_Speed : sCCThreshold # sTurnOffThreshold # sDirection;
 	c_CC : sCCButton;
 	c_VCS : sVirtualCarState;
 	c_ccEnable: sCCState;


proc Test =
	
	% Req 03 tests
		% should be FALSE
		% c_VCS(Off).aMotorForce(Forwards)

		% Should be FALSE
		% c_VCS(Off).c_Battery(Safe)

		% should be FALSE
		% c_VCS(Off).c_GasPedal(Pressed).c_VCS(On).aMotorForce(Forwards)

		% should be TRUE
		% c_VCS(On).c_GasPedal(Pressed).aMotorForce(Forwards)
 
		% should be TRUE
		c_VCS(Off).c_GasPedal(Pressed).aMotorForce(Static).c_VCS(On).aMotorForce(Forwards)
;

init
	allow({
  	aMotorForce,

		% Communications
		c_VCS,
		c_ccEnable,
		c_Battery,
		c_GasPedal,
		c_BrakePedal,
		c_DNRP,
		c_Car,
		c_Speed,
		c_CC
		},
		 Test
		);
