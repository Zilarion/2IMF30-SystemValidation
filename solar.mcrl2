% --------------------
% Sort declarations
% --------------------
sort 
	sPedalState = struct Pressed | Released;
	sDNRPState = struct D | R | NP;
	sCarState = struct SwitchOn | SwitchOff;
	sBatteryState = struct Unsafe | Safe | Full;
	sCCThreshold = struct BelowCCmin | AboveCCmin;
	sTurnOffThreshold = struct BelowTurnOffMax | AboveTurnOffMax;
	sDirection = struct Forwards | Backwards | Static;
	sCCState = struct Enable | Disable;
	sVirtualCarState = struct On | Off | CC;

% --------------------
% Action declarations
% --------------------
act
	% Input actions from the user and environment
  aGasPeddal : sPedalState;
  aBrakePeddal : sPedalState;
  aDNRP : sDNRPState;
  aCar : sCarState;
  aBattery : sBatteryState;
  aSpeed : sCCThreshold # sTurnOffThreshold # sDirection;
  aCC : sCCState;

  % Output actions
  aVCS : sVirtualCarState;
  aMotororce : sDirection;

% --------------------
% Communicating action declarations
% --------------------
act 
	% Used for communication from VCS from safety to CC
	recv_s2c_VCS,
	send_s2c_VCS, 
	s2c_VCS, 				
	% Used for communication from CC from safety to VCS			
	recv_c2s_VCS, 
	send_c2s_VCS, 
	c2s_VCS : sVirtualCarState;
	obtain_vcs_lock, give_vcs_lock, transfer_vcs_lock;

% --------------------
% Safety Procedure
% --------------------
proc Safety(vcs:sVirtualCarState) =
	% Car button interactions
	obtain_vcs_lock.(sum btn:sCarState.aCar(btn).
		% The car is turned on
		(vcs==Off && btn==SwitchOn) ->
			aVCS(On).send_s2c_VCS(On).Safety(On)
		<> 
			% The car is turned off
			((vcs==On || vcs==CC) && btn==SwitchOff) ->
				aVCS(Off).send_s2c_VCS(Off).Safety(Off)
			<> 
				send_s2c_VCS(vcs).Safety(vcs)
	)
	+

	% Cruise control interactions
	give_vcs_lock.(sum recv:sVirtualCarState.recv_c2s_VCS(recv).
		aVCS(recv).Safety(recv)
	);


% --------------------
% Cruise control procedure
% --------------------
proc CruiseControl(vcs:sVirtualCarState) = 
	obtain_vcs_lock.(aCC(Enable).
	%TODO: add additional constrains on when CC is allowed to be turned on 
		(vcs==On) ->
			send_c2s_VCS(CC).CruiseControl(CC)
		<>
			send_c2s_VCS(vcs).CruiseControl(vcs)
		+
		aCC(Disable).
		(vcs==CC) ->
			send_c2s_VCS(On).CruiseControl(On)
		<>
			send_c2s_VCS(vcs).CruiseControl(vcs)
	)
	+
	give_vcs_lock.(sum newState:sVirtualCarState.recv_s2c_VCS(newState).CruiseControl(newState));
	%TODO add additional checks on conditions that can disable CC

% --------------------
% Drive procedure
% --------------------


% --------------------
% Process definition
% --------------------
init
	allow(
		{ aCar, aCC, aVCS, s2c_VCS, c2s_VCS, transfer_vcs_lock },
	comm(
		{ 
			recv_s2c_VCS | send_s2c_VCS -> s2c_VCS, 						% Communicates VCS from safety to CC
			recv_c2s_VCS | send_c2s_VCS -> c2s_VCS, 						% Communicates VCS from CC to safety
			obtain_vcs_lock | give_vcs_lock -> transfer_vcs_lock% Lock changing the VCS
		},
		Safety(Off) || CruiseControl(Off)
		));
