% --------------------
% Sort declarations
% --------------------
sort 
	sPedalState = struct Pressed | Released;
	sDNRPState = struct D | R | NP;
	sCarState = struct SwitchOn | SwitchOff;
	sBatteryState = struct Unsafe | Safe | Full;
	sCCThreshold = struct BelowCCmin | AboveCCmin;
	sTurnOffThreshold = struct BelowTurnOffMax | AboveTurnOffMax;
	sDirection = struct Forwards | Backwards | Static;
	sCCState = struct Enable | Disable;
	sVirtualCarState = struct On | Off | CC;

% --------------------
% Action declarations
% --------------------
act
	% Input actions from the user and environment
  	aGasPeddal : sPedalState;
  	aBrakePeddal : sPedalState;
  	aDNRP : sDNRPState;
  	aCar : sCarState;
  	aBattery : sBatteryState;
  	aSpeed : sCCThreshold # sTurnOffThreshold # sDirection;
  	aCC : sCCState;

  	% Output actions
  	aVCS : sVirtualCarState;
  	aMotororce : sDirection;

% --------------------
% Communicating action declarations
% --------------------
act 
	% Used for communication from safety to CC
	recv_s2c_VCS,
	send_s2c_VCS, 
	s2c_VCS, 				
	% Used for communication from CC to safety		
	recv_c2s_VCS, 
	send_c2s_VCS, 
	c2s_VCS : sVirtualCarState;				

% --------------------
% Safety Procedure
% --------------------
proc Safety(vcs:sVirtualCarState, target:sVirtualCarState) =
	% Car button interactions
	% The car is turned on
	aCar(SwitchOn).
		(vcs==Off) ->
			Safety(vcs, On)
		<> 
		Safety(vcs, target)
	+
	
	% The car is turned off
	aCar(SwitchOff).
		((vcs==On || vcs==CC)) ->
			Safety(vcs, Off)
		<> 
		Safety(vcs, target)
	
	+
	
	% Battery is unsafe
	aBattery(Unsafe).
		Safety(vcs, Off)

	+

	(vcs != target) ->
		send_s2c_VCS(target).aVCS(target).Safety(target, target)
	
	+
	
	% Cruise control interactions
	sum recv:sVirtualCarState.recv_c2s_VCS(recv).
		% Cruise control components requests to turn on CC
		(recv==CC && vcs==On) ->
			Safety(vcs, recv)
		<> 
		% Cruise control component requests to turn off CC
		(recv==On && vcs==CC) ->
			Safety(vcs, recv)
		<>
		% Request has been denied, no change applied but the unchanged state is send back
			send_s2c_VCS(vcs).Safety(vcs, vcs);


% --------------------
% Cruise control procedure
% --------------------
proc CruiseControl(vcs:sVirtualCarState) = 
	aCC(Enable).
	%TODO: add additional constrains on when CC is allowed to be turned on
		(vcs==On) ->
			send_c2s_VCS(CC).sum recv:sVirtualCarState.(recv_s2c_VCS(recv).CruiseControl(recv))
		<>
			CruiseControl(vcs)
	+
	aCC(Disable).
		(vcs==CC) ->
			send_c2s_VCS(On).sum recv:sVirtualCarState.(recv_s2c_VCS(recv).CruiseControl(recv))
		<>
	  		CruiseControl(vcs)
	+
	sum newState:sVirtualCarState.recv_s2c_VCS(newState).CruiseControl(newState);
	%TODO add additional checks on conditions that can disable CC

% --------------------
% Drive procedure
% --------------------


% --------------------
% Process definition
% --------------------
init
	allow(
		{ aCar, aCC, aVCS, s2c_VCS, c2s_VCS },
	comm(
		{ 
			recv_s2c_VCS | send_s2c_VCS -> s2c_VCS, 		% Communicates VCS from safety to CC
			recv_c2s_VCS | send_c2s_VCS -> c2s_VCS		% Communicates VCS from CC to safety
		},
		Safety(Off, Off) || CruiseControl(Off)
		));
