% --------------------
% Sort declarations
% --------------------
sort 
	sPedalState = struct Pressed | Released;
	sDNRPState = struct D | R | NP;
	sCarState = struct SwitchOn | SwitchOff;
	sBatteryState = struct Unsafe | Safe | Full;
	sCCThreshold = struct BelowCCmin | AboveCCmin;
	sTurnOffThreshold = struct BelowTurnOffMax | AboveTurnOffMax;
	sDirection = struct Forwards | Backwards | Static;
	sCCState = struct Enable | Disable;
	sVirtualCarState = struct On | Off | CC;
	sBrakeLighting = struct LightOn | LightOff;

% --------------------
% Action declarations
% --------------------
act
	% Input actions from the user and environment
  	aGasPeddal : sPedalState;
  	aBrakePeddal : sPedalState;
  	aDNRP : sDNRPState;
  	aCar : sCarState;
  	aBattery : sBatteryState;
  	aSpeed : sCCThreshold # sTurnOffThreshold # sDirection;
  	aCC : sCCState;

  	% Output actions
  	aVCS : sVirtualCarState;
  	aMotororce : sDirection;
	aBrakeLighting: sBrakeLighting;

% --------------------
% Communicating action declarations
% --------------------
act 
	% Used for communication of VCS
	send_VCS,
	recv_VCS_light, 
	recv_VCS_drive,
	comm_VCS : sVirtualCarState;				

% --------------------
% Safety Procedure
% --------------------
proc Safety(vcs:sVirtualCarState) =
	% Car button interactions
	sum btn:sCarState.aCar(btn).
		% The car is turned on
		(btn == SwitchOn && vcs==Off) ->
			aVCS(On).send_VCS(On).Safety(On)
		<> 
		% The car is turned off
		(btn == SwitchOff && (vcs==On || vcs==CC)) ->
			aVCS(Off).send_VCS(Off).Safety(Off)
		<> 
		% We don't have to change anything
		Safety(vcs)
	
	+
	
	% Battery is unsafe
	(vcs==On) ->
		aBattery(Unsafe).aVCS(Off).send_VCS(Off).Safety(Off)

	+
	
	% Cruise control interactions
	sum btn:sCCState.aCC(btn).
		% Cruise control components requests to turn on CC
		(btn==Enable && vcs==On) ->
			aVCS(CC).send_VCS(CC).Safety(CC)
		<> 
		% Cruise control component requests to turn off CC
		(btn==Disable && vcs==CC) ->
			aVCS(On).send_VCS(On).Safety(On)
		<>
		% Request has been denied, no change applied but the unchanged state is send back
			Safety(vcs);


% --------------------
% Lighting procedure
% --------------------
proc Lighting(vcs:sVirtualCarState) = 
	sum recv:sVirtualCarState.recv_VCS_light(recv).
		(recv==Off) ->
			aBrakeLighting(LightOff).Lighting(recv)
		<>
			Lighting(vcs)

	+

	(vcs==On) -> % and brake is true
		aBrakeLighting(LightOn).Lighting(vcs);

% --------------------
% Drive procedure
% --------------------
proc Drive(vcs: sVirtualCarState) = 
	sum recv:sVirtualCarState.recv_VCS_drive(recv).Drive(recv);

% --------------------
% Process definition
% --------------------
init
	allow({ 
		aCar, aBrakeLighting, aBattery, aCC, aVCS, comm_VCS
	},
	comm({ 
		send_VCS | recv_VCS_drive | recv_VCS_light -> comm_VCS 		% Communicates VCS from safety to other modules
	},
	Safety(Off) || Lighting(Off) || Drive(Off)
	));
