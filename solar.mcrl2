% --------------------
% Sort declarations
% --------------------
sort 
	sPedalState = struct Pressed | Released;
	sDNRPState = struct D | R | NP;
	sCarState = struct On | Off;
	sBatteryState struct Unsafe | Safe | Full;
	sCCThreshold = struct BelowCCmin | AboveCCmin;
	sTurnOffThreshold = struct BelowTurnOffMax | AboveTurnOffMax;
	sDirection = struct Forwards | Backwards | Static;
	sCCState = struct Set | Reset;
	sVirtualCarState = struct On | Off | CC;

% --------------------
% Action declarations
% --------------------
act
	% Input actions from the user and environment
  aGasPeddal : PedalState;
  aBrakePeddal : PedalState;
  aDNRP : sDNRPState;
  aCar : sCarState;
  aBattery : sBatteryState;
  aSpeed : sCCThreshold # sOnOffThreshold # sDirection;
  aCC : sCCState;

  % Output actions
  aVCS : sVirtualCarState;
  aMotororce : sDirection;

% --------------------
% Safety Procedure
% --------------------
proc Safety(vcs:sVirtualCarState) =
	% All button options from this state (question: do we do btn for tracability?)

	% The car is turned on
	sum btn:sCarState.aCar(btn).
		(vcs==Off && btn==On) ->
			aVCS(On).Safety(On)
			<> 
		((vcs==On || vsc==CC) && btn==On) ->
			aVCS(Off).Safety(Off)
			<> 
			Safety(vcs)
	
	+

	% The car receives a CC communication
	sum c2s:sVirtualCarState.
		(c2s==CC && vcs==On) ->
			aVCS(CC).Safety(CC)
			<> 
			Safety(vcs)

% --------------------
% Cruise control procedure
% --------------------
proc CruiseControl(vcs:sVirtualCarState) = 
	aCC(Set).
	%TODO: add additional constrains on when CC is allowed to be turned on
	(vcs==On) ->
		aVCS(CC)
		<>
		aVCS(vcs)
	+
	aCC(Reset)
	(vcs==CC) ->
	  aVCS(On)
	  <>
	  aVSC(vcs);
	%TODO add additional checks on conditions that can disable CC

% --------------------
% Drive procedure
% --------------------


% --------------------
% Process definition
% --------------------
init
	allow(
		{ s2c_VCS, c2s_VCS },
	comm(
		{ 
			recv_s2c_VCS | send_s2c_VCS -> s2c_VCS, 						% Communicates VCS from safety to CC
			recv_c2s_VCS | send_c2s_VCS -> c2s_VCS, 						% Communicates VCS from CC to safety
		}
		));
